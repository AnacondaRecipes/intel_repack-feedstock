

# Linux
{% set mkl_version = "2022.1.0" %}      # [linux]
{% set mkl_buildnum = "223" %}          # [linux]
{% set openmp_version = mkl_version %}  # [linux]
{% set openmp_buildnum = "3768" %}      # [linux]
{% set dal_version = "2021.6.0" %}      # [linux]
{% set dal_buildnum = "915" %}          # [linux]
{% set daal_version = "2021.5.3" %}     # [linux]
{% set daal_buildnum = "832" %}         # [linux]

# OSX
{% set mkl_version = "2022.1.0" %}      # [osx]
{% set mkl_buildnum = "208" %}          # [osx]
{% set openmp_version = mkl_version %}  # [osx]
{% set openmp_buildnum = "3718" %}      # [osx]
{% set dal_version = "2021.6.0" %}      # [osx]
{% set dal_buildnum = "928" %}          # [osx]
{% set daal_version = "2021.5.0" %}     # [osx]
{% set daal_buildnum = "782" %}         # [osx]

# Windows
{% set mkl_version = "2022.1.0" %}      # [win]
{% set mkl_buildnum = "192" %}          # [win]
{% set openmp_version = mkl_version %}  # [win]
{% set openmp_buildnum = "3787" %}      # [win]
{% set dal_version = "2021.6.0" %}      # [win]
{% set dal_buildnum = "874" %}          # [win]
{% set daal_version = "2021.5.4" %}     # [win]
{% set daal_buildnum = "854" %}         # [win]


# We will use the <X>_buildnumber for the package buildnumber; however, when it's necessary to bump
# the build number, this variable is used to increment it.
{% set build_number_bump = '0' %}


package:
  name: intel_repack
  version: {{ mkl_version }}

source:
  # Conscider adding sha256 fields here.
  - url: https://anaconda.org/intel/mkl/{{ mkl_version }}/download/{{ target_platform }}/mkl-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl
  - url: https://anaconda.org/intel/mkl-devel/{{ mkl_version }}/download/{{ target_platform }}/mkl-devel-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-devel
  - url: https://anaconda.org/intel/mkl-include/{{ mkl_version }}/download/{{ target_platform }}/mkl-include-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-include
  - url: https://anaconda.org/intel/intel-openmp/{{ openmp_version }}/download/{{ target_platform }}/intel-openmp-{{ openmp_version }}-intel_{{ openmp_buildnum }}.tar.bz2
    folder: intel-openmp
  - url: https://anaconda.org/intel/dal/{{ dal_version }}/download/{{ target_platform }}/dal-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal
  - url: https://anaconda.org/intel/dal-include/{{ dal_version }}/download/{{ target_platform }}/dal-include-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-include
  - url: https://anaconda.org/intel/dal-static/{{ dal_version }}/download/{{ target_platform }}/dal-static-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-static
  - url: https://anaconda.org/intel/dal-devel/{{ dal_version }}/download/{{ target_platform }}/dal-devel-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-devel
  - url: https://anaconda.org/intel/daal/{{ daal_version }}/download/{{ target_platform }}/daal-{{ daal_version }}-intel_{{ daal_buildnum }}.tar.bz2
    folder: daal
  - url: https://anaconda.org/intel/daal-include/{{ daal_version }}/download/{{ target_platform }}/daal-include-{{ daal_version }}-intel_{{ daal_buildnum }}.tar.bz2
    folder: daal-include
  - url: https://anaconda.org/intel/daal-static/{{ daal_version }}/download/{{ target_platform }}/daal-static-{{ daal_version }}-intel_{{ daal_buildnum }}.tar.bz2
    folder: daal-static
  - url: https://anaconda.org/intel/daal-devel/{{ daal_version }}/download/{{ target_platform }}/daal-devel-{{ daal_version }}-intel_{{ daal_buildnum }}.tar.bz2
    folder: daal-devel

build:
  number: {{ mkl_buildnum|int + build_number_bump|int }}
  binary_relocation: false
  detect_binary_files_with_prefix: false
  skip: True             # [not (x86 and (linux or win or osx))]
  runpath_whitelist:     # <---------------------------------------------------------------------------------------------------------------------------------   Do a trial remove
    - $ORIGIN

outputs:
  - name: mkl
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ mkl_buildnum|int + build_number_bump|int }}
      missing_dso_whitelist:
        # tbb
        - "$RPATH/libtbb.so.12"           # [linux]
        - "$RPATH/libtbbmalloc.so.2"      # [linux]
        - "$RPATH/libtbb.12.dylib"        # [osx]
        # oneAPI ?
        - "$RPATH/impi.dll"               # [win]
        - "$RPATH/msmpi.dll"              # [win]
        # PGI tools?
        - "$RPATH/pgc.dll"                # [win]
        - "$RPATH/pgf90.dll"              # [win]
        - "$RPATH/pgmath.dll"             # [win]

    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitespace` values.
      host:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
      run:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
      run_constrained:      # [linux or osx]
        # intel-openmp 2021.1.1 and newer is built with a newer GLIBC
        - __glibc >=2.17    # [linux]
        - __osx >=10.13     # [osx]
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: mkl-include
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: MKL headers for developing software that uses MKL
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: intel-openmp
    version: {{ openmp_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ openmp_buildnum|int + build_number_bump|int }}
      missing_dso_whitelist:
        # OS specific:
        - "$RPATH/libelf.so.1"            # [linux] - OS file.
        # Optional intel-cmplr-lib-rt
        - "$RPATH/libimf.so"              # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libintlc.so.5"          # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libirng.so"             # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libirng.so"             # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libsvml.so"             # [linux] - intel-cmplr-lib-rt.
        # Optional `intel-opencl-rt`:
        - "$RPATH/libOpenCL.so.1"         # [linux] - optional `intel-opencl-rt`.
        # Optional oneAPI Level Zero Loader:
        - "$RPATH/libze_loader.so.1"      # [linux] - optional oneAPI Level Zero loader.
        - "$RPATH/ze_loader.dll"          # [win]   - optional oneAPI Level Zero loader.
        # Optional FFI
        - "$RPATH/libffi.so.6"            # [linux]

    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitespace` values.
      run_constrained:                    # [linux]
        - __glibc >=2.17                  # [linux] - intel-openmp 2021.1.1 and newer is built with a newer GLIBC
      host:
        - zlib                            # [linux]
      run:
        - zlib                            # [linux]
    about:
      home: https://software.intel.com/en-us/node/522690
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel openmp runtime implementation
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/node/522690
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  # mutex package to keep only one blas implementation in a given env
  - name: blas
    version: 1.0
    build:
      string: mkl
    test:
      commands:
        - echo 'works!'
    about:
      home: https://github.com/conda-forge/intel-repack-feedstock
      license: BSD-3-Clause
      license_file: ANACONDA_LICENSE
      summary: 'BLAS mutex for MKL'

  - name: mkl-devel
    script: install-devel.sh   # [unix]
    script: install-devel.bat  # [win]
    build:
      number: {{ mkl_buildnum|int + build_number_bump|int }}
      # when stuff is built with MKL, ensure that constraint makes mkl runtime libs as new or
      #     newer than build version
      run_exports:
        - {{ pin_subpackage('mkl') }}
        - {{ pin_subpackage('blas', exact=True) }}
        # this was added to prior mkl-devel releases but not in the feedstock. This is used by
        # various downstreams (mkl_fft, mkl_random) to include the mkl-service wrapper as a dependency.
        - mkl-service >=2.3.0,<3.0a0
    requirements:
      run:
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('mkl-include', exact=True) }}
        - blas * mkl
    about:
      home: https://software.intel.com/en-us/mkl
      summary: Metapackage of MKL headers and libraries for developing software that uses MKL
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]
        - ls -A $PREFIX/include/*  # [unix]

  - name: dal
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum|int + build_number_bump|int }}
      binary_relocation: false
      detect_binary_files_with_prefix: false
      missing_dso_whitelist:
        # tbb: Since tbb version is wildcarded in run, so we need to call it out here:
        - "$RPATH/libtbb.so.12"           # [linux]
        - "$RPATH/libtbbmalloc.so.2"      # [linux]
        # Optional intel-cmplr-lib-rt.
        - "$RPATH/libimf.so"              # [linux]
        - "$RPATH/libintlc.so.5"          # [linux]
        - "$RPATH/libirng.so"             # [linux]
        - "$RPATH/libsvml.so"             # [linux]
        - "$RPATH/libmmd.dll"             # [win]
        # # this comes from Intel's optional dpcpp_cpp_rt
        - "$RPATH/libsycl.so.5"           # [linux]
        # these two really shouldn't be here.  See mkl_repack_and_patchelf.sh
        - libiomp5.so
        - libcoi_device.so.0
        # hooray, windows
        - "C:\\Windows\\System32\\WINTRUST.dll" # [win]
        # optional dpcpp runtime that we do not yet provide.
        - "$RPATH/sycl.dll"               # [win]
        - "$RPATH/svml_dispmd.dll"        # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitespace` values.
      host:
        - tbb {{ dal_version.split('.')[0] }}.*
      run:
        - tbb {{ dal_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Intel® oneDAL runtime libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: dal-include
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum|int + build_number_bump|int }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Headers for building against Intel® oneDAL libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: dal-static
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum|int + build_number_bump|int }}
      missing_dso_whitelist:
        - $RPATH/sycld.dll            # [win]
        - $RPATH/libmmdd.dll          # [win]
        - "*\\tbb12.dll"              # [win]
        - "*\\tbbmalloc.dll"          # [win]
        - $RPATH/tbb12_debug.dll      # [win]
        - $RPATH/tbbmalloc_debug.dll  # [win]
        - $RPATH/svml_dispmd.dll      # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitespace` values.
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - tbb {{ dal_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Static libraries for Intel® oneDAL
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: dal-devel
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum|int + build_number_bump|int }}
      run_exports:
        - {{ pin_subpackage('dal') }}
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitespace` values.
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - {{ pin_subpackage('dal', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Devel package for building things linked against Intel® oneDAL shared libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*      # [unix]
        - ls -A $PREFIX/include/*  # [unix]

# Future note: all daal packages are now metapackages that depend on their respective dal equivalent.
# This was done to maintain the old name (daal) for downstream users. All binaries are contained in
# new dal* packages.

  - name: daal
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum|int + build_number_bump|int }}
    requirements:
      run:
        - {{ pin_subpackage('dal', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: DAAL runtime libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: daal-include
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum|int + build_number_bump|int }}
    requirements:
      run:
        - {{ pin_subpackage('dal-include', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Headers for building against DAAL libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: daal-static
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum|int + build_number_bump|int }}
    requirements:
      run:
        - {{ pin_subpackage('dal-static', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Static libraries for DAAL
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: daal-devel
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum|int + build_number_bump|int }}
    requirements:
      run:
        - {{ pin_subpackage('dal-devel', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Devel package for building things linked against DAAL shared libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*      # [unix]
        - ls -A $PREFIX/include/*  # [unix]

# please the linter
about:
  home: https://github.com/conda-forge/intel-repack-feedstock
  license: LicenseRef-ProprietaryIntel
  summary: 'repackaged intel libraries'

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
