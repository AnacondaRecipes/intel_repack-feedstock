

# NOTES:

#  This is a binary repack from Intel's packages. We wil reuse Intel's version and build number where possible. In the
#  case where we need to rebuild a package for any reason (for example, we need to rebuild because of our error or
#  because Intel did not update a package), we will update the integer value used to calculate <X>_buildnum from 0 to 1
#  (or as needed). This value should be reset to zero for every version roll build.

# Remember to reset buildnum when you update <X>_version or <X>_fetch_buildnum.


# Bump all build numbers here. (Note: it may be appropriate to use selectors here.)
{% set bump_all_buildnum = "1" %}
# Bump specific package build numbers here. (Note: it may be appropriate to use selectors here.)
{% set bump_mkl_buildnum = "0" %}
{% set bump_openmp_buildnum = "0" %}
{% set bump_dal_buildnum = "0" %}
{% set bump_daal_buildnum = "0" %}  # [not osx]
{% set bump_daal_buildnum = "1" %}  # [osx]


# Linux
{% set mkl_version = "2023.0.0" %}          # [linux]
{% set mkl_fetch_buildnum = "25398" %}      # [linux]

{% set openmp_version = mkl_version %}      # [linux]
{% set openmp_fetch_buildnum = "25370" %}   # [linux]

{% set dal_version = "2023.0.1" %}          # [linux]
{% set dal_fetch_buildnum = "26646" %}      # [linux]

{% set daal_version = "2021.5.3" %}         # [linux]
{% set daal_fetch_buildnum = "832" %}       # [linux]

{% set mkl_hash = "b7ccc9f8a5d1c6c41a1a13fce3a7af4226f1382920765284d5d64ba6f86db53d" %}           # [linux]
{% set mkl_devel_hash = "d9c314768a67966c9cb6258653557daaa4bc42037a18f39ab7dd04cb3961f857" %}     # [linux]
{% set mkl_include_hash = "ac06e55127ab6389d516fb07665862a315ae6dfc1331ee6e8248ce19a26cd7fd" %}   # [linux]
{% set intel_openmp_hash = "0eae400bf40e9c5d6cddf1750ce223602fa773864fdb05a794f78b07b97c54e3" %}  # [linux]
{% set dal_hash = "521fac0dbb00a24e1ec9ee60d152e000285f5f5fe642b895bdce9a960d9c4cc7" %}           # [linux]
{% set dal_include_hash = "b223ded5f99d10fcbc5196e92cd70682320fc728cbe39385d1263f028598ddae" %}   # [linux]
{% set dal_static_hash = "8c4b6f3fe9e5f934051342b9ff1b1ae6cf90d1288aa01d7eb038f8cf95f44fac" %}    # [linux]
{% set dal_devel_hash = "5fb581c151fe3fc943a6e020dc37025b0b48b6b394b51d6c36d2d1651e27320d" %}     # [linux]
{% set daal_hash = "092be0168b46861ed1eda1467ce1d13f9c6eaa7ee936a232db6638a37b0c3678" %}          # [linux]
{% set daal_include_hash = "83cfc95049a91b32895644fff532512359e33d9a26e079c4f74c2c72556ffbd8" %}  # [linux]
{% set daal_static_hash = "eaf8a0aa2ef5fb73bc96dbb64c3fbde502a9c4fd2c0044331009cf92916b995c" %}   # [linux]
{% set daal_devel_hash = "a982199ffd3d096712a6650fe02a4df4068e0093bf9f0106d9348f9cddce1fa4" %}    # [linux]


# OSX
{% set mkl_version = "2023.0.0" %}          # [osx]
{% set mkl_fetch_buildnum = "25376" %}      # [osx]

{% set openmp_version = mkl_version %}      # [osx]
{% set openmp_fetch_buildnum = "25369" %}   # [osx]

{% set dal_version = "2023.0.1" %}          # [osx]
{% set dal_fetch_buildnum = "31029" %}      # [osx]

{% set daal_version = "2021.5.0" %}         # [osx]
{% set daal_fetch_buildnum = "782" %}       # [osx]

{% set mkl_hash = "d6b7bcce92e607173537164ca4929c53b0d3ef46e605c6244770376d49d3e158" %}           # [osx]
{% set mkl_devel_hash = "25f4db156bba2c41ad4c25ef737d2e5add1bc9a457e20a856cb085ee984fbe79" %}     # [osx]
{% set mkl_include_hash = "319c75ed4a1b28b56007f72f29ad833ce3e7df8ee574ac152d3093517ce32f7e" %}   # [osx]
{% set intel_openmp_hash = "a16096d079eb5faa9a97f9cd95e810be297756ef0538e031113359fceba5bd38" %}  # [osx]
{% set dal_hash = "6017926244099779d6573c187cffca74e62a35280eef682111ed113afaca09a3" %}           # [osx]
{% set dal_include_hash = "8d8ded7b12a133fd0d6a5790d1a97e7fbae32bfae10c3b88b61e249d412ef1b2" %}   # [osx]
{% set dal_static_hash = "cd9a3f5faa75d3f5698bea09e3f271f2bdd42cb4ceba6276c0cfd32bd339bf83" %}    # [osx]
{% set dal_devel_hash = "a45eca4ae92995dbdd1c869b528b6d545e83a7600017cd72beb71dc643f66de7" %}     # [osx]
{% set daal_hash = "8d36f8d11e1af1bcc5affefc6e61c1bc60a1b1070ee780e968a91327e352b14a" %}          # [osx]
{% set daal_include_hash = "cd32960bf52d7dbaa831a4df8761352e61cf022ced409daf79be5672871a5787" %}  # [osx]
{% set daal_static_hash = "6c73100f2eb68d1feb8ea0edd188ee2d0a0cf29f5be01f6b180e895a1d5b5b18" %}   # [osx]
{% set daal_devel_hash = "fce48865aad6f67a6ee35efb17aaadc0da6fdd6e0e578420e60e7480c55bf3e0" %}    # [osx]


# Windows
{% set mkl_version = "2023.0.0" %}          # [win]
{% set mkl_fetch_buildnum = "25930" %}      # [win]

{% set openmp_version = mkl_version %}      # [win]
{% set openmp_fetch_buildnum = "25922" %}   # [win]

{% set dal_version = "2023.0.1" %}          # [win]
{% set dal_fetch_buildnum = "26645" %}      # [win]

{% set daal_version = "2021.5.4" %}         # [win]
{% set daal_fetch_buildnum = "854" %}       # [win]

{% set mkl_hash = "0c89f1809acf17643b1bd4a0c4e91f25ef3107d2526d4ec0827058c771f96034" %}           # [win]
{% set mkl_devel_hash = "b9724f079836f08fe6a481a696f9258570f310052404cb73b673015d2e9d7d6b" %}     # [win]
{% set mkl_include_hash = "0a227354489cc3b5003ae58d984ad10d37ff6dd3f6dbcdda0875251f874cf591" %}   # [win]
{% set intel_openmp_hash = "c351b0f0472c99de1f989001baf07847036158579706cb97cba35be7160f85e4" %}  # [win]
{% set dal_hash = "d85d6d3c27ceaba5a9193a4a5d9a16d98e335b4c1ad0fda718aeda3126e7507b" %}           # [win]
{% set dal_include_hash = "c337cf078bbc86269e9a21cc3659a4d479d55331a2a522bed0357698bb14720e" %}   # [win]
{% set dal_static_hash = "218e71e4321f0343525f1c438f1d5b42e6bb7e6258719dab11c69707aa1b5613" %}    # [win]
{% set dal_devel_hash = "48bdc3f42b12ce16b31e66af2bbe141f2b19bff61e162decd5841d26ba4e04b0" %}     # [win]
{% set daal_hash = "8799109a566c4a3d2f5e3800b5365e639da7f5d6032052020ceed1e801e228f5" %}          # [win]
{% set daal_include_hash = "ea3ad17eca1ecea588e641706c40fa6895ca3e0f3d10cd9c92e8a6f6ff9865aa" %}  # [win]
{% set daal_static_hash = "d3db345f3acd4d951e218301f480001b4994a639cb552d326215c8f1594d5c5a" %}   # [win]
{% set daal_devel_hash = "545b249720c20877a9691fcdb79a1489f0654ae34026308d3b1b5c4ff064b1cd" %}    # [win]


# Set the actual build numbers here. These should not be changed nor should selectors be used.
{% set mkl_buildnum = mkl_fetch_buildnum|int + bump_all_buildnum|int + bump_mkl_buildnum|int %}
{% set openmp_buildnum = openmp_fetch_buildnum|int + bump_all_buildnum|int + bump_openmp_buildnum|int %}
{% set dal_buildnum = dal_fetch_buildnum|int + bump_all_buildnum|int + bump_dal_buildnum|int %}
{% set daal_buildnum = daal_fetch_buildnum|int + bump_all_buildnum|int + bump_daal_buildnum|int %}


package:
  name: intel_repack
  version: {{ mkl_version }}

source:
  - url: https://anaconda.org/intel/mkl/{{ mkl_version }}/download/{{ target_platform }}/mkl-{{ mkl_version }}-intel_{{ mkl_fetch_buildnum }}.tar.bz2
    folder: mkl
    sha256: {{ mkl_hash }}
  - url: https://anaconda.org/intel/mkl-devel/{{ mkl_version }}/download/{{ target_platform }}/mkl-devel-{{ mkl_version }}-intel_{{ mkl_fetch_buildnum }}.tar.bz2
    folder: mkl-devel
    sha256: {{ mkl_devel_hash }}
  - url: https://anaconda.org/intel/mkl-include/{{ mkl_version }}/download/{{ target_platform }}/mkl-include-{{ mkl_version }}-intel_{{ mkl_fetch_buildnum }}.tar.bz2
    folder: mkl-include
    sha256: {{ mkl_include_hash }}
  - url: https://anaconda.org/intel/intel-openmp/{{ openmp_version }}/download/{{ target_platform }}/intel-openmp-{{ openmp_version }}-intel_{{ openmp_fetch_buildnum }}.tar.bz2
    folder: intel-openmp
    sha256: {{ intel_openmp_hash }}
  - url: https://anaconda.org/intel/dal/{{ dal_version }}/download/{{ target_platform }}/dal-{{ dal_version }}-intel_{{ dal_fetch_buildnum }}.tar.bz2
    folder: dal
    sha256: {{ dal_hash }}
  - url: https://anaconda.org/intel/dal-include/{{ dal_version }}/download/{{ target_platform }}/dal-include-{{ dal_version }}-intel_{{ dal_fetch_buildnum }}.tar.bz2
    folder: dal-include
    sha256: {{ dal_include_hash }}
  - url: https://anaconda.org/intel/dal-static/{{ dal_version }}/download/{{ target_platform }}/dal-static-{{ dal_version }}-intel_{{ dal_fetch_buildnum }}.tar.bz2
    folder: dal-static
    sha256: {{ dal_static_hash }}
  - url: https://anaconda.org/intel/dal-devel/{{ dal_version }}/download/{{ target_platform }}/dal-devel-{{ dal_version }}-intel_{{ dal_fetch_buildnum }}.tar.bz2
    folder: dal-devel
    sha256: {{ dal_devel_hash }}
  - url: https://anaconda.org/intel/daal/{{ daal_version }}/download/{{ target_platform }}/daal-{{ daal_version }}-intel_{{ daal_fetch_buildnum }}.tar.bz2
    folder: daal
    sha256: {{ daal_hash }}
  - url: https://anaconda.org/intel/daal-include/{{ daal_version }}/download/{{ target_platform }}/daal-include-{{ daal_version }}-intel_{{ daal_fetch_buildnum }}.tar.bz2
    folder: daal-include
    sha256: {{ daal_include_hash }}
  - url: https://anaconda.org/intel/daal-static/{{ daal_version }}/download/{{ target_platform }}/daal-static-{{ daal_version }}-intel_{{ daal_fetch_buildnum }}.tar.bz2
    folder: daal-static
    sha256: {{ daal_static_hash }}
  - url: https://anaconda.org/intel/daal-devel/{{ daal_version }}/download/{{ target_platform }}/daal-devel-{{ daal_version }}-intel_{{ daal_fetch_buildnum }}.tar.bz2
    folder: daal-devel
    sha256: {{ daal_devel_hash }}

build:
  number: {{ mkl_buildnum }}
  binary_relocation: false
  detect_binary_files_with_prefix: false
  skip: True             # [not (x86 and (linux or win or osx))]
  runpath_whitelist:     # <---------------------------------------------------------------------------------------------------------------------------------   Do a trial remove
    - $ORIGIN

outputs:
  - name: mkl
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ mkl_buildnum }}
      missing_dso_whitelist:
        # tbb
        - "$RPATH/libtbb.so.12"           # [linux]
        - "$RPATH/libtbbmalloc.so.2"      # [linux]
        - "$RPATH/libtbb.12.dylib"        # [osx]
        # oneAPI ?
        - "$RPATH/impi.dll"               # [win]
        - "$RPATH/msmpi.dll"              # [win]
        # PGI tools?
        - "$RPATH/pgc.dll"                # [win]
        - "$RPATH/pgf90.dll"              # [win]
        - "$RPATH/pgmath.dll"             # [win]

    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitelist` values.
      host:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
      run:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
      run_constrained:      # [linux or osx]
        # intel-openmp 2021.1.1 and newer is built with a newer GLIBC
        - __glibc >=2.17    # [linux]
        - __osx >=10.13     # [osx]
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: mkl-include
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: MKL headers for developing software that uses MKL
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: intel-openmp
    version: {{ openmp_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ openmp_buildnum }}
      missing_dso_whitelist:
        # OS specific:
        - "$RPATH/libelf.so.1"            # [linux] - OS file.
        # Optional intel-cmplr-lib-rt
        - "$RPATH/libimf.so"              # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libintlc.so.5"          # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libirng.so"             # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libirng.so"             # [linux] - intel-cmplr-lib-rt.
        - "$RPATH/libsvml.so"             # [linux] - intel-cmplr-lib-rt.
        # Optional `intel-opencl-rt`:
        - "$RPATH/libOpenCL.so.1"         # [linux] - optional `intel-opencl-rt`.
        - "$RPATH/OpenCL.dll"             # [win]   - optional `intel-opencl-rt`.
        # Optional oneAPI Level Zero Loader:
        - "$RPATH/libze_loader.so.1"      # [linux] - optional oneAPI Level Zero loader.
        - "$RPATH/ze_loader.dll"          # [win]   - optional oneAPI Level Zero loader.
        # Optional FFI
        - "$RPATH/libffi.so.6"            # [linux]

    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitelist` values.
      run_constrained:                    # [linux]
        - __glibc >=2.17                  # [linux] - intel-openmp 2021.1.1 and newer is built with a newer GLIBC
      host:
        - zlib                            # [linux]
      run:
        - zlib                            # [linux]
    about:
      home: https://software.intel.com/en-us/node/522690
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel openmp runtime implementation
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/node/522690
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  # mutex package to keep only one blas implementation in a given env
  - name: blas
    version: 1.0
    build:
      string: mkl
    test:
      commands:
        - echo 'works!'
    about:
      home: https://github.com/conda-forge/intel-repack-feedstock
      license: BSD-3-Clause
      license_file: ANACONDA_LICENSE
      summary: 'BLAS mutex for MKL'

  - name: mkl-devel
    script: install-devel.sh   # [unix]
    script: install-devel.bat  # [win]
    build:
      number: {{ mkl_buildnum }}
      # when stuff is built with MKL, ensure that constraint makes mkl runtime libs as new or
      #     newer than build version
      run_exports:
        - {{ pin_subpackage('mkl') }}
        - {{ pin_subpackage('blas', exact=True) }}
        # this was added to prior mkl-devel releases but not in the feedstock. This is used by
        # various downstreams (mkl_fft, mkl_random) to include the mkl-service wrapper as a dependency.
        - mkl-service >=2.3.0,<3.0a0
    requirements:
      run:
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('mkl-include', exact=True) }}
        - blas * mkl
    about:
      home: https://software.intel.com/en-us/mkl
      summary: Metapackage of MKL headers and libraries for developing software that uses MKL
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file: mkl/info/licenses/license.txt
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]
        - ls -A $PREFIX/include/*  # [unix]

  - name: dal
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum }}
      binary_relocation: false
      detect_binary_files_with_prefix: false
      missing_dso_whitelist:
        # tbb: Since tbb version is wildcarded in run, so we need to call it out here:
        - "$RPATH/libtbb.so.12"           # [linux]
        - "$RPATH/libtbbmalloc.so.2"      # [linux]
        # Optional intel-cmplr-lib-rt.
        - "$RPATH/libimf.so"              # [linux]
        - "$RPATH/libintlc.so.5"          # [linux]
        - "$RPATH/libirng.so"             # [linux]
        - "$RPATH/libsvml.so"             # [linux]
        - "$RPATH/libmmd.dll"             # [win]
        # Optional `intel-opencl-rt`:
        - "$RPATH/libOpenCL.so.1"         # [linux]
        - "$RPATH/OpenCL.dll"             # [win]
        # # this comes from Intel's optional dpcpp_cpp_rt
        - "$RPATH/libsycl.so.5"           # [linux]
        # these two really shouldn't be here.  See mkl_repack_and_patchelf.sh
        - libiomp5.so
        - libcoi_device.so.0
        # hooray, windows
        - "C:\\Windows\\System32\\WINTRUST.dll" # [win]
        # optional dpcpp runtime that we do not yet provide.
        - "$RPATH/sycl.dll"               # [win]
        - "$RPATH/svml_dispmd.dll"        # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitelist` values.
      host:
        - tbb {{ dal_version.split('.')[0] }}.*
      run:
        - tbb {{ dal_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Intel® oneDAL runtime libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: dal-include
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Headers for building against Intel® oneDAL libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: dal-static
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum }}
      missing_dso_whitelist:
        - $RPATH/sycld.dll            # [win]
        - $RPATH/libmmdd.dll          # [win]
        - "*\\tbb12.dll"              # [win]
        - "*\\tbbmalloc.dll"          # [win]
        - $RPATH/tbb12_debug.dll      # [win]
        - $RPATH/tbbmalloc_debug.dll  # [win]
        - $RPATH/svml_dispmd.dll      # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitelist` values.
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - tbb {{ dal_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Static libraries for Intel® oneDAL
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: dal-devel
    version: {{ dal_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      number: {{ dal_buildnum }}
      run_exports:
        - {{ pin_subpackage('dal') }}
    requirements:
      build:
        - {{ compiler('cxx') }}           # Compiler added for automatic inclusion of `missing_dso_whitelist` values.
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - {{ pin_subpackage('dal', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools.html
      summary: Devel package for building things linked against Intel® oneDAL shared libraries
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*      # [unix]
        - ls -A $PREFIX/include/*  # [unix]

# Future note: all daal packages are now metapackages that depend on their respective dal equivalent.
# This was done to maintain the old name (daal) for downstream users. All binaries are contained in
# new dal* packages.

  - name: daal
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum }}
    requirements:
      run:
        - {{ pin_subpackage('dal', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: DAAL runtime libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: daal-include
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum }}
    requirements:
      run:
        - {{ pin_subpackage('dal-include', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Headers for building against DAAL libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  - name: daal-static
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum }}
    requirements:
      run:
        - {{ pin_subpackage('dal-static', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Static libraries for DAAL
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: daal-devel
    version: {{ daal_version }}
    build:
      number: {{ daal_buildnum }}
    requirements:
      run:
        - {{ pin_subpackage('dal-devel', max_pin='x') }}
    about:
      home: https://software.intel.com/en-us/daal
      summary: Devel package for building things linked against DAAL shared libraries
      license: Intel Simplified Software License
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      license_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html
      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html
      dev_url: https://github.com/oneapi-src/oneDAL
    test:
      commands:
        - ls -A $PREFIX/lib/*      # [unix]
        - ls -A $PREFIX/include/*  # [unix]

# please the linter
about:
  home: https://github.com/conda-forge/intel-repack-feedstock
  license: LicenseRef-ProprietaryIntel
  summary: 'repackaged intel libraries'

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
